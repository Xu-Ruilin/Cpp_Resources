逻辑运算符:

&与&&

&&
表示逻辑与，
    即为and。当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。
    比如 12&&23的结果就是1，12&&-1 的结果是1，123&&0的结果就是0
    &&还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str != null && !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，所以不会出现NullPointerException

&
表示按位与操作，
    我们通常使用0x0f来与一个整数进行&运算，来获取该整数的最低4个bit位，例如，0x31 & 0x0f的结果为0x01。
    二进制与运算规则:1&1=1 1&0=0 0&0=0
    15&127为什么等于15啊？

    15二进制： （0000 1111）
    127二进制： （1111 1111）
    按位与自然就是（0000 1111）＝15


|与||

||
表示逻辑或,
    逻辑或，是逻辑运算符，符号是“||”(在PASCAL中为"or")。 “逻辑或”相当于生活中的“或者”，当两个条件中有任一个条件满足，“逻辑或”的运算结果就为“真”

    12||1 =1  12||0 =1 0||0 =0

|
表示按位或
    按位或运算 按位或运算符“|”是双目运算符。其功能是参与运算的两数各对应的二进位（也就是最后一位）相或。只要对应的二个二进位有一个为1时，结果位就为1。

|=
|=是按位或并赋值，
    和+= -= 用法差不多

?:
?:是条件运算符

    Exp1 ? Exp2 : Exp3;

其中，Exp1、Exp2 和 Exp3 是表达式。(请注意冒号的使用和位置)
?:表达式的值取决于 Exp1 的计算结果。
如果 Exp1 为真，则计算 Exp2 的值，且 Exp2 的计算结果则为整个?:表达式的值。
如果 Exp1 为假，则计算 Exp3 的值，且 Exp3 的计算结果则为整个?:表达式的值。
?:被称为三元运算符，因为它需要三个操作数，可以用来代替如下所示的 if-else 语句:

(1):
    
    if (condition)
    {
        var = X;
    }else
    {
        var = Y;
    }

(2):

    if(y < 10)
    {
        var = 30;
    }else
    {
        var = 40;
    }
    //上面的代码可以写成如下形式
    var = (y < 10) ? 30 : 40;


    算术运算符:

    这里假设A为10,B为20.
    运算符          描述                                实例                         
    +              把两个操作数相加                     A+B将得到30
    -              从第一个操作数中减去第二个操作数       A-B将得到-10
    *               把两个操作数相乘                    A*B得到200
    /               分子除以分母                        B/A将得到2
    %               取模运算符,整除后的余数             B%A将得到0
    ++              自增运算符,将整数值增加1            A++将得到11
    --              自减运算符,将整数值减少1            A--得到9

    这里看个实例:

    #include <iostream>
 
    int main(){
        int a = 21;
        int b = 10;
        int c;
 
        c = a + b;
        std::cout << "Line 1 - c 的值是 " << c << std::endl ;
        c = a - b;
        std::cout << "Line 2 - c 的值是 " << c << std::endl ;
        c = a * b;
        std::cout << "Line 3 - c 的值是 " << c << std::endl ;
        c = a / b;
        std::cout << "Line 4 - c 的值是 " << c << std::endl ;
        c = a % b;
        std::cout << "Line 5 - c 的值是 " << c << std::endl ;
 
        int d = 10;   //  测试自增、自减
        c = d++;
        std::cout << "Line 6 - c 的值是 " << c << std::endl ;
 
        d = 10;    // 重新赋值
        c = d--;
        std::cout << "Line 7 - c 的值是 " << c << std::endl ;
        return 0;
    }

    编译运行之后,输出:
        
        Line 1 - c 的值是 31
        Line 2 - c 的值是 11
        Line 3 - c 的值是 210
        Line 4 - c 的值是 2
        Line 5 - c 的值是 1
        Line 6 - c 的值是 10
        Line 7 - c 的值是 10


关系运算符


运算符	        描述	                                                        实例
==	            检查两个操作数的值是否相等，如果相等则条件为真。	                (A == B) 不为真。
!=	            检查两个操作数的值是否相等，如果不相等则条件为真。	                (A != B) 为真。
>	            检查左操作数的值是否大于右操作数的值，如果是则条件为真。	        (A > B) 不为真。
<	            检查左操作数的值是否小于右操作数的值，如果是则条件为真。	        (A < B) 为真。
>=	            检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。	     (A >= B) 不为真。
<=	            检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。       （A <= B)为真。

这里看个实例:

    #include <iostream>
    using namespace std;
 
    int main(){
        int a = 21;
        int b = 10;
        int c ;
 
        if( a == b )
        {
            cout << "Line 1 - a 等于 b" << endl ;
        }else
            {
                cout << "Line 1 - a 不等于 b" << endl ;
        }
        if ( a < b )
        {
            cout << "Line 2 - a 小于 b" << endl ;
        }else
            {
                cout << "Line 2 - a 不小于 b" << endl ;
        }
        if ( a > b )
        {
                cout << "Line 3 - a 大于 b" << endl ;
        }else
        {
            cout << "Line 3 - a 不大于 b" << endl ;
        }
        /* 改变 a 和 b 的值 */
        a = 5;
        b = 20;
        if ( a <= b )
        {
                cout << "Line 4 - a 小于或等于 b" << endl ;
        }
        if ( b >= a )
        {
                cout << "Line 5 - b 大于或等于 a" << endl ;
        }
        return 0;
    }

    编译运行之后,输出如下:

        Line 1 - a 不等于 b
        Line 2 - a 不小于 b
        Line 3 - a 大于 b
        Line 4 - a 小于或等于 b
        Line 5 - b 大于或等于 a